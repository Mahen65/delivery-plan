# delivery-plan/docker-compose.yml
# This file orchestrates both the backend (FastAPI) and frontend (React) services
# along with the PostgreSQL database.

# The 'version' attribute is considered obsolete by newer Docker Compose versions,
# but it's harmless to keep for broader compatibility.
version: '3.9'

services:
  db:
    # Use the official PostgreSQL image
    image: postgres:16-alpine
    restart: always
    environment:
      # These variables configure the PostgreSQL database.
      # They are pulled from your .env file located in the delivery-plan root.
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      # Map container port 5432 to host port 5432 (useful for direct connection/tools)
      - "5432:5432"
    volumes:
      # Persist database data to a named volume to prevent data loss on container restart/removal
      - db_data:/var/lib/postgresql/data
    healthcheck:
      # Health check to ensure the database is ready before other services try to connect
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend: # This is the service for your FastAPI backend
    # Build the backend image.
    # The 'context' specifies the directory where the Dockerfile for THIS service is located.
    # It's relative to THIS docker-compose.yml file.
    build:
      context: ./delivery-ai-core # <--- CRITICAL: Points to your backend folder
      dockerfile: Dockerfile      # Looks for Dockerfile inside ./delivery-ai-core/
    container_name: delivery-backend-1 # Optional: clearer name for the container
    env_file:
      - ./.env # Reads .env from the delivery-plan root
    ports:
      # Map container port 8000 to host port 8001
      - "8001:8000"
    depends_on:
      db:
        condition: service_healthy # Ensure DB is healthy before starting backend
    volumes:
      # Mount the local backend app directory into the container for live code changes (dev)
      - ./delivery-ai-core/app:/app/app
      - ./delivery-ai-core/main.py:/app/main.py
      - ./delivery-ai-core/alembic:/app/alembic # Ensure alembic files are mapped
      - ./delivery-ai-core/requirements.txt:/app/requirements.txt # Map requirements for initial installs
      - ./delivery-ai-core/.env:/app/.env # Map .env for internal app access if needed (though already handled by docker-compose for service)
    restart: always

  frontend: # This is the service for your React frontend
    # Build the frontend image.
    # The 'context' specifies the directory where the Dockerfile for THIS service is located.
    build:
      context: ./delivery-app # <--- CRITICAL: Points to your frontend folder
      dockerfile: Dockerfile   # Looks for Dockerfile inside ./delivery-app/
    container_name: delivery-frontend-1 # Optional: clearer name for the container
    ports:
      # Map container port 80 (Nginx/Serve default) to host port 3000
      - "3000:80"
    depends_on:
      - backend # Frontend depends on backend being available for API calls
    restart: always

volumes:
  # Define the named volume for PostgreSQL data persistence
  db_data:
